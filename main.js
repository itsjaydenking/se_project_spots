!function(){"use strict";var e="";const t={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__submit-btn",inactiveButtonClass:"modal__submit-btn_disabled",inputErrorClass:"modal__input_type_error"},r=(e,t,r)=>{e.querySelector(`#${t.id}-error`).textContent="",t.classList.remove(r.inputErrorClass)},a=(e,t)=>{e.disabled=!0,e.classList.add(t.inactiveButtonClass)},o=(e,t,r)=>{(e=>e.some(e=>!e.validity.valid))(e)?a(t,r):((e,t)=>{e.disabled=!1,e.classList.remove(t.inactiveButtonClass)})(t,r)},s=(e,t)=>{Array.from(e.querySelectorAll(t.inputSelector)).forEach(a=>{r(e,a,t)}),a(e.querySelector(t.submitButtonSelector),t)};var n=e+"8bd92903aece9fed9ac5.svg",i=e+"350cd634429859fefcee.png",d=e+"3f562ce83766a824571e.svg",l=e+"975792ea68af0a3c209d.svg",c=e+"d73f076c46eb5467f5fc.svg";document.querySelector(".header__logo").src=n,document.querySelector(".profile__avatar").src=i,document.querySelector(".profile__edit-icon").src=d,document.querySelector(".profile__new-post-icon").src=l,document.querySelector(".profile__pencil-icon").src=c;const u=new class{constructor(e){this._baseUrl=e.baseUrl,this._headers=e.headers}getAppInfo(){return Promise.all([this.getInitialCards(),this.getUserInfo()])}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{headers:this._headers}).then(e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`))}getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{headers:this._headers}).then(e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`))}editUserInfo([e,t]){return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e,about:t})}).then(e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`))}postNewCard(e){return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify(e)}).then(e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`))}deleteCard(e){return fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers}).then(e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`))}likeCard(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"PUT",headers:this._headers}).then(e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`))}dislikeCard(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:this._headers}).then(e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`))}updateUserAvatar(e){return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify(e)}).then(e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`))}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"57edc072-caed-4edd-a330-de0f2db62a71","Content-Type":"application/json"}});let _=null,m=null;const h=(e,t=document)=>t.querySelector(e),p=(e,t)=>{e.textContent=t,e.disabled=!0},v=(e,t)=>{e.textContent=t,e.disabled=!1},f=e=>{e.classList.add("modal_is-opened"),document.addEventListener("keydown",y)},b=e=>{e.classList.remove("modal_is-opened"),document.removeEventListener("keydown",y)},E=e=>{h(".modal__close-btn",e).addEventListener("click",()=>b(e)),e.addEventListener("click",t=>{t.target===e&&b(e)})},k=()=>{document.querySelectorAll(".modal_is-opened").forEach(b)};function y(e){"Escape"===e.key&&k()}const S=h("#edit-profile-modal"),g=h("#new-post-modal"),C=h("#preview-modal"),L=h("#avatar-modal"),$=h("#delete-modal"),U=h(".profile__edit-button"),j=h(".modal__form",S),q=h("#profile-name-input",S),P=h("#profile-description-input",S),w=h(".profile__name"),x=h(".profile__description"),A=h(".profile__avatar"),I=h(".profile__avatar-button"),D=h(".modal__form",L),T=h("#avatar-input",L),B=h(".profile__new-post-button"),N=h(".modal__form",g),O=h("#image-link-input",g),J=h("#image-caption-input",g),H=(h(".modal__submit-btn",g),h(".modal__submit-btn_type_delete",$)),z=h(".modal__submit-btn_type_cancel",$),M=h("#card-template").content.querySelector(".card"),F=h(".cards__list");function G(e,t){const r=M.cloneNode(!0),a=h(".card__image",r),o=h(".card__title",r),s=h(".card__like-button",r),n=h(".card__delete-button",r);return a.src=e.link,a.alt=e.name,o.textContent=e.name,r.dataset.cardId=e._id,s.addEventListener("click",()=>{const t=e._id;s.classList.contains("card__like-button_active")?u.dislikeCard(t).then(t=>{s.classList.remove("card__like-button_active"),e.likes=t.likes}).catch(e=>{console.error("Error disliking card:",e)}):u.likeCard(t).then(t=>{s.classList.add("card__like-button_active"),e.likes=t.likes}).catch(e=>{console.error("Error liking card:",e)})}),n.addEventListener("click",()=>{m=r,f($)}),a.addEventListener("click",()=>{const t=h("#preview-image",C),r=h("#preview-caption",C);t.src=e.link,t.alt=e.name,r.textContent=e.name,f(C)}),r}E(S),E(g),E(C),E(L),E($),u.getAppInfo().then(([e,t])=>{_=t,e.forEach(e=>{F.append(G(e))}),w.textContent=t.name,x.textContent=t.about,A.src=t.avatar}).catch(e=>{console.error("Error loading app data:",e)}),U.addEventListener("click",()=>{q.value=w.textContent,P.value=x.textContent,s(j,t),f(S)}),j.addEventListener("submit",e=>{e.preventDefault();const t=h(".modal__submit-btn",j);p(t,"Saving..."),u.editUserInfo([q.value,P.value]).then(e=>{w.textContent=e.name,x.textContent=e.about,b(S)}).catch(e=>{console.error("Error updating profile:",e)}).finally(()=>{v(t,"Save")})}),I.addEventListener("click",()=>{s(D,t),f(L)}),D.addEventListener("submit",e=>{e.preventDefault();const t=h(".modal__submit-btn",D);p(t,"Saving..."),u.updateUserAvatar({avatar:T.value}).then(e=>{A.src=e.avatar,b(L),D.reset()}).catch(e=>{console.error("Error updating avatar:",e)}).finally(()=>{v(t,"Save")})}),B.addEventListener("click",()=>f(g)),N.addEventListener("submit",e=>{e.preventDefault();const r=h(".modal__submit-btn",N);p(r,"Saving...");const a={name:J.value,link:O.value};u.postNewCard(a).then(e=>{F.prepend(G(e)),N.reset(),s(N,t),b(g)}).catch(e=>{console.error("Error creating new post:",e)}).finally(()=>{v(r,"Save")})}),H.addEventListener("click",()=>{if(m){const e=m.dataset.cardId;p(H,"Deleting..."),u.deleteCard(e).then(()=>{m.remove(),m=null,b($)}).catch(e=>{console.error("Error deleting card:",e)}).finally(()=>{v(H,"Delete")})}}),z.addEventListener("click",()=>{m=null,b($)}),(e=>{document.querySelectorAll(e.formSelector).forEach(t=>{((e,t)=>{const a=Array.from(e.querySelectorAll(t.inputSelector)),s=e.querySelector(t.submitButtonSelector);o(a,s,t),a.forEach(n=>{n.addEventListener("input",function(){((e,t,a)=>{t.validity.valid?r(e,t,a):((e,t,r,a)=>{const o=e.querySelector(`#${t.id}-error`);t.classList.add(a.inputErrorClass),o.textContent=r})(e,t,t.validationMessage,a)})(e,n,t),o(a,s,t)})})})(t,e)})})(t)}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,